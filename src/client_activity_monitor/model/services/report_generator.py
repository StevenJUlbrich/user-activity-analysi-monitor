import pandas as pd
from pathlib import Path
from datetime import datetime
from typing import Optional, Dict, Any
from loguru import logger
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.utils.dataframe import dataframe_to_rows

class ReportGenerator:
    """
    Handles report generation in Excel and CSV formats.
    """
    
    def __init__(self, report_output_dir: str = "reports"):
        """
        Initialize report generator with output directory.
        
        Args:
            report_output_dir: Directory to save reports
        """
        self.report_dir = Path(report_output_dir)
        self.report_dir.mkdir(exist_ok=True)
        
    def create_excel_report(
        self,
        data: pd.DataFrame,
        user_sid: str,
        last_event_time: datetime,
        additional_info: Optional[Dict[str, Any]] = None
    ) -> Path:
        """
        Create formatted Excel report with metadata.
        
        Args:
            data: Filtered DataFrame with qualifying users
            user_sid: SID of user who ran the report (for audit)
            last_event_time: The "Last Time Event Reported" used for filtering
            additional_info: Optional additional metadata
            
        Returns:
            Path to the generated Excel file
        """
        # Generate filename with timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"user_activity_report_{timestamp}.xlsx"
        filepath = self.report_dir / filename
        
        # Create Excel writer
        with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
            # Write main data
            data.to_excel(writer, sheet_name='User Activity', index=False)
            
            # Get workbook and worksheet
            workbook = writer.book
            worksheet = writer.sheets['User Activity']
            
            # Apply formatting
            self._format_excel_worksheet(worksheet, data)
            
            # Add metadata sheet
            self._add_metadata_sheet(
                workbook,
                user_sid,
                last_event_time,
                len(data),
                additional_info
            )
            
        logger.info(f"Excel report generated: {filepath}")
        return filepath
        
    def create_csv_report(
        self,
        data: pd.DataFrame,
        user_sid: str,
        last_event_time: datetime
    ) -> Path:
        """
        Create CSV report (optional save).
        
        Args:
            data: Filtered DataFrame with qualifying users
            user_sid: SID of user who ran the report
            last_event_time: The "Last Time Event Reported" used for filtering
            
        Returns:
            Path to the generated CSV file
        """
        # Generate filename with timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"user_activity_report_{timestamp}.csv"
        filepath = self.report_dir / filename
        
        # Add metadata as comments at the top of CSV
        with open(filepath, 'w') as f:
            f.write(f"# User Activity Report\n")
            f.write(f"# Generated By: {user_sid}\n")
            f.write(f"# Generated At: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"# Last Event Time: {last_event_time.strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"# Total Users: {len(data)}\n")
            f.write("#\n")
            
        # Append data to CSV
        data.to_csv(filepath, mode='a', index=False)
        
        logger.info(f"CSV report generated: {filepath}")
        return filepath
        
    def _format_excel_worksheet(self, worksheet, data: pd.DataFrame):
        """
        Apply formatting to Excel worksheet.
        """
        # Header formatting
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        header_alignment = Alignment(horizontal="center", vertical="center")
        
        # Apply header formatting
        for cell in worksheet[1]:
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment
            
        # Auto-adjust column widths
        for column in worksheet.columns:
            max_length = 0
            column_letter = column[0].column_letter
            
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
                    
            adjusted_width = min(max_length + 2, 50)
            worksheet.column_dimensions[column_letter].width = adjusted_width
            
        # Format datetime columns
        datetime_columns = [col for col in data.columns if 'time' in col.lower() or 'date' in col.lower()]
        for col_idx, col_name in enumerate(data.columns, 1):
            if col_name in datetime_columns:
                for row in range(2, len(data) + 2):
                    cell = worksheet.cell(row=row, column=col_idx)
                    cell.number_format = 'yyyy-mm-dd hh:mm:ss'
                    
        # Add filters
        worksheet.auto_filter.ref = worksheet.dimensions
        
        # Freeze header row
        worksheet.freeze_panes = worksheet['A2']
        
    def _add_metadata_sheet(
        self,
        workbook,
        user_sid: str,
        last_event_time: datetime,
        total_users: int,
        additional_info: Optional[Dict[str, Any]] = None
    ):
        """
        Add metadata sheet to workbook.
        """
        # Create metadata sheet
        metadata_sheet = workbook.create_sheet('Report Metadata', 0)
        
        # Add metadata
        metadata = [
            ['Report Information', ''],
            ['', ''],
            ['Report Type:', 'User Activity Analysis'],
            ['Generated By:', user_sid],
            ['Generated At:', datetime.now().strftime('%Y-%m-%d %H:%M:%S')],
            ['', ''],
            ['Analysis Parameters', ''],
            ['Last Event Time:', last_event_time.strftime('%Y-%m-%d %H:%M:%S')],
            ['Time Window:', '24 hours before Last Event Time'],
            ['Query Start Date:', '30 days before analysis'],
            ['', ''],
            ['Results Summary', ''],
            ['Total Qualifying Users:', total_users],
            ['Required Changes:', 'Password, Email, Phone, Token'],
            ['Criteria:', 'All 4 changes within 24-hour window'],
        ]
        
        # Add additional info if provided
        if additional_info:
            metadata.append(['', ''])
            metadata.append(['Additional Information', ''])
            for key, value in additional_info.items():
                metadata.append([f'{key}:', str(value)])
                
        # Write metadata
        for row_idx, row_data in enumerate(metadata, 1):
            for col_idx, value in enumerate(row_data, 1):
                cell = metadata_sheet.cell(row=row_idx, column=col_idx, value=value)
                
                # Format headers
                if col_idx == 1 and value and value.endswith(':'):
                    cell.font = Font(bold=True)
                elif row_data[0] in ['Report Information', 'Analysis Parameters', 'Results Summary', 'Additional Information']:
                    cell.font = Font(bold=True, size=12)
                    
        # Adjust column widths
        metadata_sheet.column_dimensions['A'].width = 25
        metadata_sheet.column_dimensions['B'].width = 40
        
    def format_for_clipboard(self, data: pd.DataFrame) -> str:
        """
        Format DataFrame for clipboard (used by Copy Excel Path).
        
        Args:
            data: DataFrame to format
            
        Returns:
            Tab-separated string suitable for clipboard
        """
        if data.empty:
            return "No data to copy"
            
        # Convert to tab-separated for Excel paste
        return data.to_csv(sep='\t', index=False)